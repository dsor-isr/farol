<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="SilentNode_8cpp" kind="file" language="C++">
    <compoundname>SilentNode.cpp</compoundname>
    <includes refid="SilentNode_8h" local="no">SilentNode.h</includes>
    <incdepgraph>
      <node id="5">
        <label>queue</label>
      </node>
      <node id="9">
        <label>std_msgs/Bool.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>dmac/DMACClock.h</label>
      </node>
      <node id="2">
        <label>SilentNode.h</label>
        <link refid="SilentNode_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>farol_msgs/mUSBLFix.h</label>
      </node>
      <node id="10">
        <label>std_msgs/UInt32.h</label>
      </node>
      <node id="1">
        <label>src/silent_ros/SilentNode.cpp</label>
        <link refid="SilentNode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>interrogation_scheme/StartSilent.h</label>
      </node>
      <node id="7">
        <label>std_msgs/Empty.h</label>
      </node>
      <node id="6">
        <label>ros/ros.h</label>
      </node>
      <node id="8">
        <label>std_msgs/String.h</label>
      </node>
      <node id="14">
        <label>farol_gimmicks_library/FarolGimmicks.h</label>
      </node>
      <node id="11">
        <label>dmac/DMACPayload.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="SilentNode_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/silent_ros/SilentNode.cpp" line="588" column="5" bodyfile="src/silent_ros/SilentNode.cpp" bodystart="588" bodyend="598"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015,<sp/>Farol<sp/>Team,<sp/>Instituto<sp/>Superior<sp/>Tecnico</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SilentNode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="classSilentPinger_1a4a88f60fe381899fae7bd08e7ed37b89" kindref="member">SilentPinger::SilentPinger</ref>(ros::NodeHandle<sp/>*nodehandle,<sp/>ros::NodeHandle<sp/>*nodehandle_private):nh_(*nodehandle),<sp/>nh_private_(*nodehandle_private){</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>loadParams();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>modems<sp/>and<sp/>slots<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;modems_list.size();<sp/>++i){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(atof(modems_list[i].c_str()));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slot_list[i]);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>with<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>initializeSubscribers();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>initializePublishers();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>initializeTimer();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>non-zero<sp/>time<sp/>now<sp/>values<sp/>(else<sp/>it<sp/>won&apos;t<sp/>be<sp/>possible<sp/>to<sp/>publish<sp/>in<sp/>the<sp/>constructor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ros::Duration(5.0).sleep();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trigger<sp/>ECLK<sp/>message<sp/>for<sp/>computation<sp/>of<sp/>time<sp/>offset<sp/>between<sp/>Modem&apos;s<sp/>System<sp/>Clock<sp/>and<sp/>UTC<sp/>Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>triggerECLKmessage();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>lastRECVTime_modem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>lastRECVTime_ros<sp/>=<sp/>ros::Time(0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>next<sp/>maximum<sp/>range<sp/>because<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>range_max<sp/>=<sp/>(slots.front()<sp/>-<sp/>tslack)/2.0*SOUND_SPEED;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>waiting_for_serializer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>ok_check<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>anchor)<sp/>first_time<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>first_time<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>starts<sp/>the<sp/>modem<sp/>in<sp/>disable<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>ENABLE_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">SilentPinger::~SilentPinger(){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_enable.shutdown();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_in_modem.shutdown();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_serializer.shutdown();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_im.shutdown();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_range.shutdown();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_triggerserialization.shutdown();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_deserialization.shutdown();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>stop<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.stop();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>nh_.shutdown();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@.@<sp/>Member<sp/>Helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>subscribers;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::initializeSubscribers(){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>SilentPinger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>sub_enable<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/enable&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;<ref refid="classSilentPinger_1a35d3e794e51b81ceb839c553dd3a1b28" kindref="member">SilentPinger::EnableCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>sub_in_modem<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/modem_recv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;modem/recv&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;<ref refid="classSilentPinger_1a590274c81c1faae350aa9bc1db7f5937" kindref="member">SilentPinger::RECVIMSCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>sub_serializer<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/payload&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;payload_to_transmit&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;<ref refid="classSilentPinger_1a7c480cf7d6ca957aecf71b6370e9de39" kindref="member">SilentPinger::serializerCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>!=<sp/>anchor)<sp/>sub_tinit<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/tinit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tinit_sub&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;<ref refid="classSilentPinger_1a69eb1bb148122efb8f89298875693cae" kindref="member">SilentPinger::timeFromAnchorCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sub_tinit<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/send_time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;send_time&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;<ref refid="classSilentPinger_1acc30ff38f93d2b0e164fe7080eab5b50" kindref="member">SilentPinger::startCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>sub_modem_clock<sp/>=<sp/>nh_.subscribe(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/modem_clock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;clock&quot;</highlight><highlight class="normal">),<sp/>1,<sp/>&amp;SilentPinger::modemClockCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::initializePublishers(){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>SilentPinger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>pub_im<sp/>=<sp/>nh_.advertise&lt;dmac::DMACPayload&gt;(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/modem_send&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;modem/send&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>pub_range<sp/>=<sp/>nh_.advertise&lt;farol_msgs::mUSBLFix&gt;(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/meas_usbl_fix&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;measurement/usbl_fix&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>pub_triggerserialization<sp/>=<sp/>nh_.advertise&lt;std_msgs::Empty&gt;(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/trigger_serialization&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;trigger_serialization&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>pub_deserialization<sp/>=<sp/>nh_.advertise&lt;std_msgs::String&gt;(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/deserialize&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;payload_to_deserialize&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>anchor)<sp/>pub_tinit<sp/>=<sp/>nh_.advertise&lt;std_msgs::UInt32&gt;(FarolGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/tinit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tinit_pub&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@.@<sp/>Load<sp/>the<sp/>parameters</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::loadParams(){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Load<sp/>the<sp/>SilentPinger<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>modems_list<sp/>=<sp/>FarolGimmicks::getParameters&lt;std::vector&lt;std::string&gt;&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;modems_list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>slot_list<sp/>=<sp/>FarolGimmicks::getParameters&lt;std::vector&lt;double&gt;&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;slot_list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>tslack<sp/>=<sp/>FarolGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;tslack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>modem_id<sp/>=<sp/>FarolGimmicks::getParameters&lt;int&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;modem_id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>anchor<sp/>=<sp/>FarolGimmicks::getParameters&lt;int&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;anchor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>tnew_start<sp/>=<sp/>FarolGimmicks::getParameters&lt;int&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;tnew_start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@.@<sp/>Member<sp/>helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>the<sp/>timer;<sp/>This<sp/>is<sp/>a<sp/>more<sp/>flexible<sp/>and<sp/>useful<sp/>form<sp/>of<sp/>the<sp/>ros::Rate</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::initializeTimer(){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>timer<sp/>=<sp/>nh_.createTimer(ros::Duration(slots.front()),<sp/>&amp;<ref refid="classSilentPinger_1a9bc3f2b1bbfb5c88955f648aeb1dfba3" kindref="member">SilentPinger::Timer</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>timer.stop();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>timer_sys_clock_overflow<sp/>=<sp/>nh_.createTimer(ros::Duration(0.5),<sp/>&amp;SilentPinger::SysClockOverflowHandler,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::triggerECLKmessage()<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>dmac::DMACPayload<sp/>im;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>im.header.stamp<sp/>=<sp/>ros::Time::now();<sp/></highlight><highlight class="comment">//<sp/>message<sp/>time<sp/>stamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>im.destination_address<sp/>=<sp/>255;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Broadcast<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>im.type<sp/>=<sp/>im.DMAC_ECLK;<sp/></highlight><highlight class="comment">//<sp/>media<sp/>access<sp/>type:<sp/>BURST/IM/IMS/PBM/ECLK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>undefined<sp/>time<sp/>since<sp/>the<sp/>message<sp/>should<sp/>be<sp/>sent<sp/>to<sp/>the<sp/>modem<sp/>asap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>im.timestamp_undefined<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>message<sp/>to<sp/>ask<sp/>for<sp/>External<sp/>Clock<sp/>from<sp/>modem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>im.payload<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AT?ECLK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>pub_im.publish(im);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Message<sp/>was<sp/>sent!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a35d3e794e51b81ceb839c553dd3a1b28" kindref="member">SilentPinger::EnableCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Bool&amp;<sp/>msg){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ENABLE_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>msg.data<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>ENABLE_<sp/>=<sp/>msg.data;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Enabled<sp/>silent<sp/>acoustic<sp/>scheme&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ENABLE_<sp/>=<sp/>msg.data;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinitialzie<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>ok_check<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>timer.stop();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>with<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IDEA<sp/>TO<sp/>MAKE<sp/>TINIT<sp/>ZERO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tinit<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::modemClockCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dmac::DMACClock&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>offset<sp/>between<sp/>physical<sp/>clock<sp/>and<sp/>utc<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>computeModemTimeOffset(msg.phy_clock,<sp/>msg.utc_time.sec,<sp/>msg.utc_time.nsec);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>when<sp/>modem<sp/>system<sp/>clock<sp/>will<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>computeModemSysClockOverflowTime(msg.phy_clock,<sp/>modem_time_offset);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::computeModemTimeOffset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>system_clock,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utc_time_sec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utc_time_nsec)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>in<sp/>microseconds<sp/>(UTC<sp/>Time<sp/>-<sp/>Modem<sp/>System<sp/>Clock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>modem_time_offset<sp/>=<sp/>(boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(utc_time_sec)<sp/>*<sp/>1000000<sp/>+<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(utc_time_nsec)<sp/>/<sp/>1000)<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(system_clock);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Modem<sp/>Offset<sp/>(UTC<sp/>-<sp/>SysClock):<sp/>%lu<sp/>microseconds.&quot;</highlight><highlight class="normal">,<sp/>modem_time_offset);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::computeModemSysClockOverflowTime(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>system_clock,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modem_time_offset)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>how<sp/>many<sp/>microseconds<sp/>until<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>int<sp/>time_until_overflow<sp/>=<sp/>UNSIGNED_INT_MAX<sp/>-<sp/>system_clock;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>utc<sp/>time<sp/>corresponding<sp/>to<sp/>sys<sp/>clock<sp/>overflow<sp/>instant<sp/>(seconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sys_clock_overflow_instant<sp/>=<sp/>(boost::lexical_cast&lt;double&gt;(boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(system_clock)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>modem_time_offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(time_until_overflow)))/1000000;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>sys_clock_overflow_instant<sp/>=<sp/>(boost::lexical_cast&lt;double&gt;(boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(UNSIGNED_INT_MAX)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>modem_time_offset))/1000000;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Next<sp/>Sys<sp/>Clock<sp/>Overflow:<sp/>%f<sp/>seconds.&quot;</highlight><highlight class="normal">,<sp/>sys_clock_overflow_instant);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SilentPinger::SysClockOverflowHandler(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>clock<sp/>overflow<sp/>instant<sp/>hasn&apos;t<sp/>been<sp/>set<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sys_clock_overflow_instant<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>overflow<sp/>instant<sp/>has<sp/>passed,<sp/>we<sp/>need<sp/>to<sp/>update<sp/>the<sp/>modem_time_offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ros::Time::now().toSec()<sp/>&gt;<sp/>sys_clock_overflow_instant)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>modem_time_offset<sp/>+=<sp/>UNSIGNED_INT_MAX;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;NEW:<sp/>Modem<sp/>Offset<sp/>(UTC<sp/>-<sp/>SysClock):<sp/>%lu<sp/>microseconds.&quot;</highlight><highlight class="normal">,<sp/>modem_time_offset);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>overflow<sp/>instant<sp/>should<sp/>be<sp/>calculated<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_clock_overflow_instant<sp/>+=<sp/>boost::lexical_cast&lt;double&gt;(UNSIGNED_INT_MAX/1000000);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;NEW:<sp/>Next<sp/>Sys<sp/>Clock<sp/>Overflow:<sp/>%f<sp/>seconds.&quot;</highlight><highlight class="normal">,<sp/>sys_clock_overflow_instant);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>that<sp/>the<sp/>modem_time_offset<sp/>has<sp/>been<sp/>updated<sp/>as<sp/>soon<sp/>as<sp/>possible,<sp/>we<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>properly<sp/>update<sp/>it<sp/>using<sp/>the<sp/>ECLK<sp/>message<sp/>from<sp/>the<sp/>modem<sp/>(which<sp/>might<sp/>be<sp/>slower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>communication<sp/>issues),<sp/>but<sp/>the<sp/>new<sp/>values<sp/>for<sp/>the<sp/>offset<sp/>and<sp/>overflow<sp/>instant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>100%<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//triggerECLKmessage();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1acc30ff38f93d2b0e164fe7080eab5b50" kindref="member">SilentPinger::startCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interrogation_scheme::StartSilent&amp;<sp/>msg){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ENABLE_){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>start<sp/>interrogation<sp/>scheme<sp/>without<sp/>enabling<sp/>first.<sp/>Enable,<sp/>then<sp/>retry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Sending<sp/>init<sp/>time<sp/>to<sp/>other<sp/>vehicles...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>to<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>tinit<sp/>=<sp/>msg.hours<sp/>*<sp/>3600<sp/>+<sp/>msg.minutes<sp/>*<sp/>60<sp/>+<sp/>msg.seconds<sp/>+<sp/>ros::Time::now().toSec();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>time<sp/>to<sp/>be<sp/>read<sp/>by<sp/>Data<sp/>Serializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std_msgs::UInt32<sp/>tmsg;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>tmsg.data<sp/>=<sp/>tinit;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_tinit.publish(tmsg);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Set<sp/>time<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(tmsg.data));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_before_start<sp/>=<sp/><ref refid="classSilentPinger_1abe24f7009f68bc354267471b62a6f150" kindref="member">getTimeBeforeStart</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>init<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>redundancy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>ok_check<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>with<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSilentPinger_1a2e24f83f02e7a972595e7946293f89a2" kindref="member">pingNextNode</ref>(tinit<sp/>-<sp/>time_before_start);<sp/><sp/></highlight><highlight class="comment">//<sp/>Ping<sp/>all<sp/>vehicles<sp/>to<sp/>start<sp/>at<sp/>certain<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a69eb1bb148122efb8f89298875693cae" kindref="member">SilentPinger::timeFromAnchorCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::UInt32&amp;<sp/>msg){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>time<sp/>from<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msg.data<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>init<sp/>mode<sp/>for<sp/>non-anchors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Redundancy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>tinit<sp/>=<sp/>msg.data;<sp/></highlight><highlight class="comment">//<sp/>Give<sp/>starting<sp/>time<sp/>for<sp/>non-anchors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>with<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_before_start<sp/>=<sp/><ref refid="classSilentPinger_1abe24f7009f68bc354267471b62a6f150" kindref="member">getTimeBeforeStart</ref>();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Time<sp/>From<sp/>all<sp/>slots<sp/>combined<sp/>%3f,<sp/>tinit<sp/>=<sp/>%lu,<sp/>now<sp/>=<sp/>%3f&quot;</highlight><highlight class="normal">,<sp/>time_before_start,<sp/>tinit,<sp/>ros::Time::now().toSec());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Conta<sp/>=<sp/>%3f&quot;</highlight><highlight class="normal">,<sp/>tinit<sp/>-<sp/>ros::Time::now().toSec()<sp/>-<sp/>time_before_start);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>tslot_end<sp/>=<sp/>tinit<sp/>-<sp/>time_before_start;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>end<sp/>time<sp/>to<sp/>pick<sp/>up<sp/>start<sp/>for<sp/>non-anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.stop();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.setPeriod(ros::Duration(tinit<sp/>-<sp/>ros::Time::now().toSec()<sp/>-<sp/>time_before_start),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1abe24f7009f68bc354267471b62a6f150" kindref="member">SilentPinger::getTimeBeforeStart</ref>(){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>right<sp/>time<sp/>to<sp/>wake<sp/>up<sp/>modems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>front_modem<sp/>=<sp/>modems.front();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>with<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor){</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_before_start<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>next<sp/>modem<sp/>and<sp/>add<sp/>slot<sp/>time<sp/>until<sp/>reaching<sp/>anchor<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>time_before_start<sp/>+=<sp/>slots.front();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>anchor);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>time_before_start<sp/>-=<sp/>slots.front();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Organize<sp/>modem<sp/>and<sp/>slot<sp/>queue<sp/>to<sp/>start<sp/>where<sp/>we<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(modems.front()<sp/>!=<sp/>front_modem){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Time<sp/>before<sp/>start<sp/>=<sp/>%3f&quot;</highlight><highlight class="normal">,<sp/>time_before_start);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_before_start;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a590274c81c1faae350aa9bc1db7f5937" kindref="member">SilentPinger::RECVIMSCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dmac::DMACPayload&amp;<sp/>msg){</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Received<sp/>message!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>scheme<sp/>is<sp/>not<sp/>enabled,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ENABLE_)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>Clock<sp/>with<sp/>the<sp/>last<sp/>known<sp/>instant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="classSilentPinger_1acd1facb2d6348558d47603cd3a1127d4" kindref="member">updateClock</ref>(msg.timestamp+msg.duration,<sp/>msg.header.stamp);<sp/></highlight><highlight class="comment">//<sp/>deprecated?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Received<sp/>message.<sp/>source<sp/>=<sp/>%d,<sp/>modems<sp/>front<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>msg.source_address,<sp/>modems.front());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(init){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>anchor){</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok_check++;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>deserialize<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std_msgs::String<sp/>payload_data;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>payload_data.data<sp/>=<sp/>msg.payload<sp/>+<sp/>&quot;:vehicle&quot;<sp/>+<sp/>std::to_string(msg.source_address);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pub_deserialization.publish(payload_data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>compute<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tlastRECVIMS<sp/>=<sp/>msg.timestamp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>double<sp/>range<sp/>=<sp/>((tlastRECVIMS-tlastSENDIMS)-tslack*1000000)/2000000.0*SOUND_SPEED;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>range<sp/>=<sp/>(tlastRECVIMS<sp/>-<sp/>(tslot_start<sp/>+<sp/>tslack)<sp/>*<sp/>1000000)/1000000.0*SOUND_SPEED;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slot_ack<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Discard<sp/>very<sp/>strange<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(fabs(range)&lt;range_max){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Building<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>farol_msgs::mUSBLFix<sp/>range_msg;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.type=range_msg.RANGE_ONLY;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.header.stamp=msg.header.stamp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>-ros::Duration(fabs(range)/SOUND_SPEED+tslack/2.0);<sp/><sp/>time<sp/>stamp<sp/>of<sp/>half-way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.header.frame_id<sp/>=<sp/>&quot;usbl&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.range<sp/>=<sp/>range;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.source_id<sp/>=<sp/>msg.source_address;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>range_msg.source_name<sp/>=<sp/>msg.source_name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>pub_range.publish(range_msg);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>ROS_WARN(&quot;Range<sp/>to<sp/>node<sp/>%d<sp/>is<sp/>%.3f<sp/>of<sp/>max<sp/>value<sp/>%.3f<sp/>with<sp/>frame<sp/>%s&quot;,<sp/>msg.source_address,<sp/>range,<sp/>range_max,<sp/>msg.header.frame_id.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msg.source_address<sp/>==<sp/>modems.front()<sp/>&amp;&amp;<sp/>msg.type<sp/>==<sp/>msg.DMAC_IMS){</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>ID<sp/>corresponds<sp/>to<sp/>the<sp/>modem<sp/>we<sp/>are<sp/>expecting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Serialization<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>msg.payload;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str.c_str()));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deserialize<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>std_msgs::String<sp/>payload_data;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>payload_data.data<sp/>=<sp/>msg.payload<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:vehicle&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(msg.source_address);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_deserialization.publish(payload_data);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>tlastRECVIMS<sp/>=<sp/>msg.timestamp;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>range<sp/>=<sp/>((tlastRECVIMS-tlastSENDIMS)-tslack*1000000)/2000000.0*SOUND_SPEED;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>travel_time<sp/>=<sp/>(boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(msg.timestamp)<sp/>+<sp/>modem_time_offset)<sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(tslot_start<sp/>+<sp/>tslack)*1000000;<sp/></highlight><highlight class="comment">//<sp/>microseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>boost::lexical_cast&lt;double&gt;(travel_time)<sp/>/<sp/>1000000<sp/>*<sp/>SOUND_SPEED;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;UTC:<sp/>Message<sp/>timestamp:<sp/>%lu<sp/>us,<sp/>t_slot_start:<sp/>%lu<sp/>s&quot;</highlight><highlight class="normal">,<sp/>boost::lexical_cast&lt;unsigned<sp/>long<sp/>int&gt;(msg.timestamp)<sp/>+<sp/>modem_time_offset,<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tslot_start);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Travel<sp/>Time:<sp/>%lu,<sp/>Range:<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>travel_time,<sp/>range);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>slot_ack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>very<sp/>strange<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(range)&lt;range_max){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Building<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>farol_msgs::mUSBLFix<sp/>range_msg;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.type=range_msg.RANGE_ONLY;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.header.stamp=msg.header.stamp;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-ros::Duration(fabs(range)/SOUND_SPEED+tslack/2.0);<sp/><sp/>time<sp/>stamp<sp/>of<sp/>half-way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;usbl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.range<sp/>=<sp/>range;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.source_id<sp/>=<sp/>msg.source_address;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range_msg.source_name<sp/>=<sp/>msg.source_name;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pub_range.publish(range_msg);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Range<sp/>to<sp/>node<sp/>%d<sp/>is<sp/>%.3f<sp/>of<sp/>max<sp/>value<sp/>%.3f<sp/>with<sp/>frame<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>msg.source_address,<sp/>range,<sp/>range_max,<sp/>msg.header.frame_id.c_str());</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>information<sp/>is<sp/>received<sp/>in<sp/>the<sp/>wrong<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Received<sp/>in<sp/>the<sp/>wrong<sp/>cycle:<sp/>destination<sp/>modem<sp/>[%d]<sp/>instead<sp/>of<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>modems.front(),<sp/>msg.source_address);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Ask<sp/>for<sp/>Clock<sp/>to<sp/>the<sp/>Modem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1acd1facb2d6348558d47603cd3a1127d4" kindref="member">SilentPinger::updateClock</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmodem,<sp/>ros::Time<sp/>tros){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>long<sp/>int<sp/>old_clock=getModemClockNow();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>lastRECVTime_modem<sp/>=<sp/>tmodem;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>lastRECVTime_ros<sp/>=<sp/>tros;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>last<sp/>modem<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a4f16d44013562d36815acbfb3664484b" kindref="member">SilentPinger::getModemClockNow</ref>(){</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>ros::Time<sp/>tnow<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastRECVTime_modem<sp/>+<sp/>(tnow-lastRECVTime_ros).toSec()*1000000+100000;<sp/></highlight><highlight class="comment">//<sp/>100ms<sp/>diff<sp/>detected<sp/>between<sp/>estimated<sp/>and<sp/>real<sp/>(maybe<sp/>processing<sp/>and<sp/>receiving<sp/>messages)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a82fc9ea7723062118d12b0d1127bc552" kindref="member">SilentPinger::triggerSerialization</ref>(){</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>std_msgs::Empty<sp/>aux;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>pub_triggerserialization.publish(aux);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>waiting_for_serializer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a7c480cf7d6ca957aecf71b6370e9de39" kindref="member">SilentPinger::serializerCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::String&amp;<sp/>msg){</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waiting_for_serializer)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Received<sp/>payload<sp/>to<sp/>transmit,<sp/>in<sp/>the<sp/>wrong<sp/>cycle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>waiting_for_serializer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>Message<sp/>to<sp/>Modem<sp/>after<sp/>a<sp/>slack<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>long<sp/>int<sp/>tping<sp/>=<sp/>round((tslot_start<sp/>+<sp/>tslack)*1000000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tping<sp/>=<sp/>tslot_start<sp/>+<sp/>tslack;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>in<sp/>UTC<sp/>time,<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>dmac::DMACPayload<sp/>im;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>im.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>im.destination_address<sp/>=<sp/>255;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Broadcast<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>im.type<sp/>=<sp/>im.DMAC_IMS;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>im.timestamp<sp/>=<sp/>boost::lexical_cast&lt;unsigned<sp/>int&gt;(tping*1000000<sp/>-<sp/>modem_time_offset);<sp/></highlight><highlight class="comment">//<sp/>timestamp<sp/>in<sp/>Modem<sp/>System<sp/>Clock<sp/>(microseconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::bad_lexical_cast<sp/>&amp;e){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;ERROR:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;tping:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>tping);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;modem_time_offset:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>modem_time_offset);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;timestamp:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>tping*1000000<sp/>-<sp/>modem_time_offset);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>im.timestamp<sp/>=<sp/>boost::lexical_cast&lt;unsigned<sp/>int&gt;(tping*1000000<sp/>-<sp/>modem_time_offset);<sp/>//<sp/>timestamp<sp/>in<sp/>Modem<sp/>System<sp/>Clock<sp/>(microseconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;destination<sp/>address<sp/>%d,<sp/>utc<sp/>timestamp<sp/>%lu,<sp/>sys<sp/>clock<sp/>timestamp<sp/>=<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im.destination_address,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(tping),<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(im.timestamp));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>while(ros::Time::now().toSec()<sp/>&lt;<sp/>tping);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>undefined<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tping<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if(tping==0)<sp/>im.timestamp_undefined<sp/>=true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>im.timestamp_undefined<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>im.timestamp_undefined<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>im.ack<sp/><sp/>=<sp/>replier_ack;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>im.payload<sp/>=<sp/><sp/>msg.data;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>pub_im.publish(im);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Message<sp/>was<sp/>sent!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a2e24f83f02e7a972595e7946293f89a2" kindref="member">SilentPinger::pingNextNode</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tinit_aux){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ENABLE_)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>pinging<sp/>behaviour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tinit_aux<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>tslot_start<sp/>=<sp/>tslot_end;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>tslot_end<sp/>=<sp/>tslot_start<sp/>+<sp/>slots.front();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>next<sp/>maximum<sp/>range<sp/>because<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>range_max<sp/>=<sp/>(slots.front()<sp/>-<sp/>tslack)/2.0*SOUND_SPEED;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>tslot_start<sp/>=<sp/>ros::Time::now().toSec();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>tslot_end<sp/>=<sp/>tinit_aux;<sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>init<sp/>time<sp/>to<sp/>wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>next<sp/>maximum<sp/>range<sp/>because<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>range_max<sp/>=<sp/>(tslot_end<sp/>-<sp/>tslot_start<sp/>-<sp/>tslack)/2.0*SOUND_SPEED;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>modems.front()){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>request<sp/>the<sp/>serializer<sp/>to<sp/>serialize<sp/>the<sp/>data<sp/>to<sp/>be<sp/>sent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Triggered<sp/>serialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSilentPinger_1a82fc9ea7723062118d12b0d1127bc552" kindref="member">triggerSerialization</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;duration<sp/>troubleshooot<sp/>%3f&quot;</highlight><highlight class="normal">,<sp/>tslot_end<sp/>-<sp/>ros::Time::now().toSec());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>timer.stop();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>timer.setPeriod(ros::Duration(tslot_end<sp/>-<sp/>ros::Time::now().toSec()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSilentPinger_1a9bc3f2b1bbfb5c88955f648aeb1dfba3" kindref="member">SilentPinger::Timer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent&amp;<sp/>e){</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>current<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(init){</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>first<sp/>element<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>anchor<sp/>&amp;&amp;<sp/>modems.front()<sp/>==<sp/>modem_id){</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Checking<sp/>if<sp/>got<sp/>ok<sp/>from<sp/>everyone<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ok_check);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ok_check<sp/>==<sp/>modems.size()<sp/>-<sp/>1){</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Got<sp/>ok<sp/>checks<sp/>from<sp/>everyone,<sp/>anchor<sp/>moves<sp/>to<sp/>normal<sp/>pinging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>time<sp/>input<sp/>for<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>==<sp/>anchor){</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::UInt32<sp/>tmsg;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmsg.data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pub_tinit.publish(tmsg);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>it<sp/>failed<sp/>the<sp/>check<sp/>and<sp/>is<sp/>now<sp/>going<sp/>to<sp/>postpone<sp/>the<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hours,<sp/>minutes,<sp/>seconds;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>tnew_start<sp/>%<sp/>60;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minutes<sp/>=<sp/>tnew_start<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hours<sp/>=<sp/>minutes<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minutes<sp/>=<sp/>minutes<sp/>%<sp/>60;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrogation_scheme::StartSilent<sp/>msg;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.hours<sp/>=<sp/>hours;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.minutes<sp/>=<sp/>minutes;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.seconds<sp/>=<sp/>seconds;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSilentPinger_1acc30ff38f93d2b0e164fe7080eab5b50" kindref="member">startCallback</ref>(msg);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Vai<sp/>pingar<sp/>de<sp/>volta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSilentPinger_1a2e24f83f02e7a972595e7946293f89a2" kindref="member">pingNextNode</ref>();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waiting_for_serializer){</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;No<sp/>reply<sp/>from<sp/>serializer<sp/>in<sp/>%.3fs&quot;</highlight><highlight class="normal">,<sp/>slots.front());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slot_ack){</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Received<sp/>reply<sp/>from<sp/>modem<sp/>[%d]<sp/>with<sp/>slot<sp/>time<sp/>%.3fs&quot;</highlight><highlight class="normal">,<sp/>modems.front(),<sp/>slots.front());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slot_ack<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modem_id<sp/>!=<sp/>modems.front()){</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;No<sp/>reply<sp/>from<sp/>modem<sp/>[%d]<sp/>in<sp/>the<sp/>corresponding<sp/>slot<sp/>%.3fs&quot;</highlight><highlight class="normal">,<sp/>modems.front(),<sp/>slots.front());</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>waiting_for_serializer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>first<sp/>element<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.push(modems.front());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>modems.pop();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.push(slots.front());</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>slots.pop();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSilentPinger_1a2e24f83f02e7a972595e7946293f89a2" kindref="member">pingNextNode</ref>();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>MAIN</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv){</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;silent_acomms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh,<sp/>nh_private(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><ref refid="classSilentPinger" kindref="compound">SilentPinger</ref><sp/>pinger(&amp;nh,<sp/>&amp;nh_private);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pinger.pingNextNode();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/silent_ros/SilentNode.cpp"/>
  </compounddef>
</doxygen>
